#include "Terrain.hpp"int patterns[] = { 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3 };int widths[] = { 2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4 };int heights[] = { 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,4 };int types[] = { 1,2,3,4,1,3,2,4,3,2,1,4,2,3,1,4,2,3,1,2,3,2,3,4,1,2,4,3,1,3,1,4,2,4,2,1,2,3 };vector<int> _blockPattern(patterns, patterns + sizeof(patterns) / sizeof(int));vector<int> _blockWidths(widths, widths + sizeof(widths) / sizeof(int));vector<int> _blockHeights(heights, heights + sizeof(heights) / sizeof(int));vector<int> _blockTypes(types, types + sizeof(types) / sizeof(int));CustomTerrain::~CustomTerrain() {}CustomTerrain::CustomTerrain()	:_screenSize(Director::getInstance()->getWinSize())	, _startTerrain(false)	, _blockPoolIndex(0)	, _currentPatternCnt(1)	, _currentPatternIndex(0)	, _currentTypeIndex(0)	, _currentWidthIndex(0)	, _currentHeightIndex(0)	, _showGap(false){}CustomTerrain * CustomTerrain::create() {	CustomTerrain * terrain = new CustomTerrain();	if (terrain && terrain->initWithFile("blank.png")) {		terrain->setAnchorPoint(Vec2(0, 0));		terrain->initTerrain();		terrain->autorelease();		return terrain;	}	CC_SAFE_DELETE(terrain);	return NULL;}void CustomTerrain::initTerrain() {}void CustomTerrain::checkCollision(Player * player) {}void CustomTerrain::move(float xMove) {}void CustomTerrain::reset() {}void CustomTerrain::addBlocks(int currentWidth) {}void CustomTerrain::distributeBlocks() {}void CustomTerrain::initBlock(Block * block) {}